from math import sqrt
from typing import List

from pyemerald.model.stuctures import (
    BoundaryConditionType,
    Construction,
    Door,
    Equipment,
    Infiltration,
    Lights,
    Material,
    MaterialWindowGas,
    MaterialWindowGlazing,
    OutputMeter,
    OutputVariable,
    Person,
    ScheduleCompact,
    ScheduleConstant,
    ScheduleTypeLimit,
    Surface,
    SurfaceType,
    Vertex2D,
    Vertex3D,
    Window,
    Zone,
)


class Model:

    def __init__(self):
        self.idf_string = ''
        # order does matter here, materials need to be declared before constructions, etc.
        self._setup_settings()
        self._setup_location()
        self._setup_scheduling()
        self._setup_zones()
        self._setup_internal_gains()
        self._setup_materials()
        self._setup_constructions()
        self._setup_floor_vertices()
        self._setup_roof_eave_vertices()
        self._setup_surfaces()
        self._setup_windows_and_doors()
        self._water_use()
        self._setup_hvac()
        self._setup_outputs()

    @staticmethod
    def _build_wall_vertices(vertex_a: Vertex2D, vertex_b: Vertex2D, ceiling_height: float) -> List[Vertex3D]:
        """The vertices should be given in clockwise order as you walk around the exterior of the space"""
        return [
            Vertex3D.from_vertex_and_height(vertex_a, 0),
            Vertex3D.from_vertex_and_height(vertex_a, ceiling_height),
            Vertex3D.from_vertex_and_height(vertex_b, ceiling_height),
            Vertex3D.from_vertex_and_height(vertex_b, 0)
        ]

    @staticmethod
    def _build_window_vertices(v_a: Vertex2D, v_b: Vertex2D, bottom_height: float, top_height: float) -> List[Vertex3D]:
        """The vertices should be given in clockwise order as you walk around the exterior of the space"""
        return [
            Vertex3D.from_vertex_and_height(v_a, bottom_height),
            Vertex3D.from_vertex_and_height(v_a, top_height),
            Vertex3D.from_vertex_and_height(v_b, top_height),
            Vertex3D.from_vertex_and_height(v_b, bottom_height)
        ]

    @staticmethod
    def _build_fake_attic_wall_vertices(v_a: Vertex2D, v_b: Vertex2D, bottom: float, top: float) -> List[Vertex3D]:
        """The vertices should be given in clockwise order as you walk around the exterior of the space"""
        return [
            Vertex3D.from_vertex_and_height(v_a, bottom),
            Vertex3D.from_vertex_and_height(v_a, top),
            Vertex3D.from_vertex_and_height(v_b, top),
            Vertex3D.from_vertex_and_height(v_b, bottom)
        ]

    @staticmethod
    def _add_height_to_vertices(height: float, vertices: List[Vertex2D]) -> List[Vertex3D]:
        return_vertices = list()
        for vertex in vertices:
            return_vertices.append(Vertex3D.from_vertex_and_height(vertex, height))
        return return_vertices

    def _add_idf_object(self, object_name: str, *object_data):
        if len(object_data) == 0:
            self.idf_string += '  ' + object_name + ';\n'
        else:
            self.idf_string += '  ' + object_name + ',\n'
            for i, f in enumerate(object_data):
                if i+1 == len(object_data):
                    self.idf_string += '    ' + str(f) + ';\n'
                else:
                    self.idf_string += '    ' + str(f) + ',\n'
        self.idf_string += '\n'

    def _setup_settings(self):
        self._add_idf_object('Version', 9.3)
        self._add_idf_object('TimeStep', 4)
        self._add_idf_object('Building', 'EmeraldWay', 0, 'Country', 0.5, 0.05, 'MinimalShadowing', 6, 2)
        self._add_idf_object('SimulationControl', 'No', 'No', 'No', 'Yes', 'Yes')
        self._add_idf_object('GlobalGeometryRules', 'UpperLeftCorner', 'CounterClockwise', 'World')
        self._add_idf_object('RunPeriod', 'Year 2020', 1, 1, 2020, 12, 31, 2020, '', 'Yes', 'Yes', 'No', 'Yes', 'Yes')
        self._add_idf_object('RunPeriodControl:DaylightSavingTime', '2nd Sunday in March', '2nd Sunday in November')

    def _setup_location(self):
        self._add_idf_object('Site:Location', 'Cashion', 35.798, -97.679, -6, 396)
        # building surface temps were generated by Slab
        self._add_idf_object(
            'Site:GroundTemperature:BuildingSurface',
            22.797, 22.755, 23.005, 25.524, 26.319, 26.965, 27.372, 27.515, 27.325, 26.906, 24.156, 23.281
        )
        self._add_idf_object(
            'SizingPeriod:DesignDay',
            'Winter Sizing Period', 1, 21, 'WinterDesignDay', -11.4, 0.0, 'DefaultMultipliers', '', 'WetBulb', -11.4,
            '', '', '', '', 96634, 6.1, 0, 'No', 'No', 'No', 'ASHRAEClearSky', '', '', '', '', 0.0
        )
        self._add_idf_object(
            'SizingPeriod:DesignDay',
            'Summer Sizing Period', 7, 21, 'SummerDesignDay', 37.5, 11.7, 'DefaultMultipliers', '', 'WetBulb', 23.4,
            '', '', '', '', 96634, 5.5, 170, 'No', 'No', 'No', 'ASHRAETau', '', '', 0.426, 2.214
        )

    def _setup_zones(self):
        # set up zones
        self.zone_indoor = Zone("Indoor")
        self.zone_garage = Zone("Garage")
        self.zone_attic = Zone("Attic")
        # write IDF
        self._add_idf_object('Zone', self.zone_indoor.name, 0, 0, 0, 0, 1, 1, 'AutoCalculate', 'AutoCalculate')
        self._add_idf_object('Zone', self.zone_garage.name, 0, 0, 0, 0, 1, 1, 'AutoCalculate', 'AutoCalculate')
        self._add_idf_object('Zone', self.zone_attic.name, 0, 0, 0, 0, 1, 1, 'AutoCalculate', 'AutoCalculate')

    def _setup_materials(self):
        # setup materials
        self.material_brick = Material('Brick', 0.11, 0.7, 1970, 800, 'Handbook 2017 - Brick, Building')
        self.material_sheathing = Material('Sheathing', 0.02, 0.09, 288, 1300, 'https://researchgate.net')
        self.material_wall_insulation = Material('R13Insulation', 0.09, 0.04, 45, 2020, 'https://www.greenspec.co.uk')
        self.material_gypsum = Material('Gypsum', 0.013, 0.16, 800, 837, 'https://researchgate.net')
        self.material_shingles = Material('Shingles', 0.01, 0.74, 2110, 920, 'Handbook 2017 - Asphalt')
        self.material_ceiling_insulation = Material('R31Insulation', 0.21, 0.04, 45, 2020, 'www.greenspec.co.uk')
        self.material_concrete = Material('6InchConcrete', 0.15, 1.73, 2242, 837, 'In IDF data-sets')
        self.material_wood_floor = Material('WoodFlooring', 0.03, 0.17, 750, 2390, 'Handbook 2017 - Assuming Oak')
        self.material_garage_door = Material('GarageDoorMetal', 0.005, 167, 2700, 896, 'Assuming Aluminum')
        self.material_door = Material('DoorMaterialWood', 0.05, 0.17, 750, 2390, 'Handbook 2017 - Assuming Oak')
        self.material_soffit = Material(
            'Soffit-Hardboard',
            0.05, 0.15, 600, 2300,
            'Conductivity from PerformancePanels.com, matched up with average hardwood in Handbook 2017'
        )
        self.material_glass_3mm = MaterialWindowGlazing('Clear 3mm Glazing', 0.003)
        self.material_window_gas = MaterialWindowGas('Air Gap 13mm', 'Air', 0.013)
        # write IDF
        all_materials = [
            self.material_brick, self.material_sheathing, self.material_wall_insulation, self.material_gypsum,
            self.material_shingles, self.material_ceiling_insulation, self.material_concrete, self.material_wood_floor,
            self.material_garage_door, self.material_door, self.material_soffit
        ]
        for m in all_materials:
            self._add_idf_object(
                'Material',
                m.name, 'MediumRough', m.thickness, m.thermal_conductivity, m.density, m.specific_heat, 0.9, 0.6, 0.6
            )
        for g in [self.material_glass_3mm]:
            self._add_idf_object(
                'WindowMaterial:Glazing',
                g.name, 'SpectralAverage', '', g.thickness,
                0.837, 0.075, 0.075, 0.898, 0.081, 0.081, 0.0, 0.84, 0.84, 0.9
            )
        for gas in [self.material_window_gas]:
            self._add_idf_object(
                'WindowMaterial:Gas',
                gas.name, gas.gas_type, gas.thickness
            )

    def _setup_constructions(self):
        # set up constructions
        self.construction_exterior_wall = Construction('BrickWallConstruction', [
            self.material_brick, self.material_sheathing, self.material_wall_insulation, self.material_gypsum
        ])
        self.construction_insulated_partition_wall = Construction('InsulatedPartitionWall', [
            self.material_gypsum, self.material_wall_insulation, self.material_gypsum
        ])
        self.construction_roof = Construction('RoofConstruction', [
            self.material_shingles, self.material_sheathing
        ])
        self.construction_floor = Construction('FloorConstruction', [
            self.material_concrete, self.material_wood_floor
        ])
        self.construction_garage_floor = Construction('GarageFloorConstruction', [self.material_concrete])
        self.construction_door = Construction('DoorConstruction', [self.material_door])
        self.construction_garage_door = Construction('GarageDoorConstruction', [self.material_garage_door])
        self.construction_ceiling = Construction('CeilingConstruction', [
            self.material_ceiling_insulation, self.material_gypsum
        ])
        self.construction_soffit = Construction('SoffitConstruction', [self.material_soffit])
        self.construction_operable_window = Construction('OperableWindow', [
            self.material_glass_3mm, self.material_window_gas, self.material_glass_3mm
        ])
        self.construction_inoperable_window = Construction('InoperableWindow', [
            self.material_glass_3mm, self.material_window_gas, self.material_glass_3mm
        ])
        # write IDF
        all_constructions = [
            self.construction_exterior_wall,
            self.construction_insulated_partition_wall,
            self.construction_roof,
            self.construction_floor,
            self.construction_garage_floor,
            self.construction_door,
            self.construction_garage_door,
            self.construction_operable_window,
            self.construction_inoperable_window,
            self.construction_ceiling,
            self.construction_soffit
        ]
        for c in all_constructions:
            self._add_idf_object('Construction', c.name, *[layer.name for layer in c.layers])

    def _setup_floor_vertices(self):
        # set up vertices
        self.v_1 = Vertex2D('1', 28.212034, 43.770042)
        self.v_2 = Vertex2D('2', 29.521912, 45.796454)
        self.v_3 = Vertex2D('3', 27.004772, 47.423578)
        self.v_4 = Vertex2D('4', 29.127958, 50.70856)
        self.v_5 = Vertex2D('5', 32.00781, 48.847248)
        self.v_6 = Vertex2D('6', 33.05556, 50.46853)
        self.v_7 = Vertex2D('7', 32.031686, 51.1302)
        self.v_8 = Vertex2D('8', 34.21253, 54.499002)
        self.v_9 = Vertex2D('9', 34.722816, 54.169056)
        self.v_10 = Vertex2D('10', 36.543234, 56.984138)
        self.v_11 = Vertex2D('11', 35.68954, 57.536588)
        self.v_12 = Vertex2D('12', 36.682426, 59.071764)
        self.v_13 = Vertex2D('13', 36.29787, 59.321192)
        self.v_14 = Vertex2D('14', 38.090602, 62.093856)
        self.v_15 = Vertex2D('15', 38.474396, 61.845444)
        self.v_16 = Vertex2D('16', 39.467536, 63.381128)
        self.v_17 = Vertex2D('17', 43.349418, 60.872878)
        self.v_18 = Vertex2D('18', 45.555408, 64.285876)
        self.v_19 = Vertex2D('19', 51.123088, 60.68695)
        self.v_20 = Vertex2D('20', 43.416474, 48.76165)
        self.v_21 = Vertex2D('21', 43.949112, 48.41748)
        self.v_22 = Vertex2D('22', 41.59123, 44.769532)
        self.v_23 = Vertex2D('23', 41.0591, 45.113956)
        self.v_24 = Vertex2D('24', 40.478964, 44.21886)
        self.v_25 = Vertex2D('25', 41.01211, 43.874182)
        self.v_26 = Vertex2D('26', 40.061388, 42.40149)
        self.v_27 = Vertex2D('27', 39.52748, 42.74693)
        self.v_28 = Vertex2D('28', 36.65982, 38.309042)
        self.v_29 = Vertex2D('29', 33.332674, 40.45966)
        self.v_30 = Vertex2D('30', 32.945832, 39.863014)
        self.v_31 = Vertex2D('31', 30.599634, 41.379902)
        self.v_32 = Vertex2D('32', 30.986984, 41.975786)
        self.v_34 = Vertex2D('34', 39.542212, 55.136542)
        self.v_35 = Vertex2D('35', 41.501822, 58.192924)
        self.v_36 = Vertex2D('36', 47.154846, 54.547008)

    def _setup_roof_eave_vertices(self):
        self.v_37 = Vertex2D('37', 27.685238, 43.657012)
        self.v_38 = Vertex2D('38', 28.994862, 45.683424)
        self.v_39 = Vertex2D('39', 26.477722, 47.310548)
        self.v_40 = Vertex2D('40', 27.746198, 49.272952)
        self.v_41 = Vertex2D('41', 29.014674, 51.23561)
        self.v_42 = Vertex2D('42', 32.240982, 56.227218)
        self.v_43 = Vertex2D('43', 34.609024, 54.696868)
        self.v_44 = Vertex2D('44', 36.015168, 56.872632)
        self.v_45 = Vertex2D('45', 35.161982, 57.42432)
        self.v_46 = Vertex2D('46', 36.154614, 58.960258)
        self.v_47 = Vertex2D('47', 35.77082, 59.208416)
        self.v_48 = Vertex2D('48', 36.873688, 60.914788)
        self.v_49 = Vertex2D('49', 37.97681, 62.621414)
        self.v_50 = Vertex2D('50', 38.360858, 62.373256)
        self.v_51 = Vertex2D('51', 39.35349, 63.909194)
        self.v_52 = Vertex2D('52', 43.23588, 61.399674)
        self.v_53 = Vertex2D('53', 45.44187, 64.812926)
        self.v_54 = Vertex2D('54', 51.64963, 60.800742)
        self.v_55 = Vertex2D('55', 43.942254, 48.87595)
        self.v_56 = Vertex2D('56', 47.035466, 46.876716)
        self.v_57 = Vertex2D('57', 42.168318, 39.346632)
        self.v_58 = Vertex2D('58', 39.075106, 41.345866)
        self.v_59 = Vertex2D('59', 36.772596, 37.783262)
        self.v_60 = Vertex2D('60', 33.444688, 39.934388)
        self.v_61 = Vertex2D('61', 33.058608, 39.33698)
        self.v_62 = Vertex2D('62', 30.07233, 41.26738)
        self.v_63 = Vertex2D('63', 30.458156, 41.864534)

    def _setup_surfaces(self):
        # set up surfaces
        ceiling_height = 3.05  # eventually we need to fine tune this
        self.surface_main_bath_exterior_wall_west = Surface(
            'Main Bath Exterior Wall West',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_1, self.v_2, ceiling_height))
        self.surface_dax_exterior_wall_south = Surface(
            'Dax Exterior Wall South',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_2, self.v_3, ceiling_height))
        self.surface_dax_exterior_wall_west = Surface(
            'Dax Exterior Wall West',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_3, self.v_4, ceiling_height))
        self.surface_dax_exterior_wall_north = Surface(
            'Dax Exterior Wall North',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_4, self.v_5, ceiling_height))
        self.surface_entry_exterior_wall = Surface(
            'Entry Exterior Wall',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_5, self.v_6, ceiling_height))
        self.surface_office_exterior_wall_south = Surface(
            'Office Exterior Wall South',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_6, self.v_7, ceiling_height))
        self.surface_office_exterior_wall_west = Surface(
            'Office Exterior Wall West',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_7, self.v_8, ceiling_height))
        self.surface_office_exterior_wall_north = Surface(
            'Office Exterior Wall North',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_8, self.v_9, ceiling_height))
        self.surface_utility_exterior_wall_west = Surface(
            'Utility Exterior Wall West',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_9, self.v_10, ceiling_height))
        # conditioned-to-garage interface walls
        self.inter_zone_surface_small_garage = Surface(
            'Inter-zone Surface Small Garage Side',
            self.zone_indoor, SurfaceType.WALL, self.construction_insulated_partition_wall,
            BoundaryConditionType.OTHER_ZONE, self.zone_garage, 0.0, False, False,
            self._build_wall_vertices(self.v_10, self.v_34, ceiling_height))
        self.inter_zone_surface_intermediate = Surface(
            'Inter-zone Surface Intermediate Wall',
            self.zone_indoor, SurfaceType.WALL, self.construction_insulated_partition_wall,
            BoundaryConditionType.OTHER_ZONE, self.zone_garage, 0.0, False, False,
            self._build_wall_vertices(self.v_34, self.v_35, ceiling_height))
        self.inter_zone_surface_large_garage = Surface(
            'Inter-zone Surface Large Garage Side',
            self.zone_indoor, SurfaceType.WALL, self.construction_insulated_partition_wall,
            BoundaryConditionType.OTHER_ZONE, self.zone_garage, 0.0, False, False,
            self._build_wall_vertices(self.v_35, self.v_36, ceiling_height))
        # now do the garage exterior walls
        self.surface_garage_exterior_wall_south_a = Surface(
            'Garage Exterior Wall South A',
            self.zone_garage, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_10, self.v_11, ceiling_height))
        self.surface_garage_exterior_wall_west_a = Surface(
            'Garage Exterior Wall West A',
            self.zone_garage, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_11, self.v_12, ceiling_height))
        self.surface_garage_exterior_wall_south_b = Surface(
            'Garage Exterior Wall South B',
            self.zone_garage, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_12, self.v_13, ceiling_height))
        self.surface_garage_exterior_wall_west_b_with_window = Surface(
            'Garage Exterior Wall West B With Window',
            self.zone_garage, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_13, self.v_14, ceiling_height))
        self.surface_garage_exterior_wall_north_a = Surface(
            'Garage Exterior Wall North A',
            self.zone_garage, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_14, self.v_15, ceiling_height))
        self.surface_garage_exterior_wall_west_c = Surface(
            'Garage Exterior Wall West C',
            self.zone_garage, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_15, self.v_16, ceiling_height))
        self.surface_garage_exterior_wall_north_b_with_small_garage_and_man_door = Surface(
            'Garage Exterior Wall North B With Small Garage Door And Man Door',
            self.zone_garage, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_16, self.v_17, ceiling_height))
        self.surface_garage_exterior_wall_west_d = Surface(
            'Garage Exterior Wall West D',
            self.zone_garage, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_17, self.v_18, ceiling_height))
        self.surface_garage_exterior_wall_north_c_with_large_garage_door = Surface(
            'Garage Exterior Wall North C With Large Garage Door',
            self.zone_garage, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_18, self.v_19, ceiling_height))
        self.surface_garage_exterior_wall_east = Surface(
            'Garage Exterior Wall East',
            self.zone_garage, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_19, self.v_36, ceiling_height))
        # back to the remaining conditioned space exterior surfaces
        self.surface_master_exterior_wall_east = Surface(
            'Master Exterior Wall East',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_36, self.v_20, ceiling_height))
        self.surface_dining_exterior_wall_north = Surface(
            'Dining Exterior Wall North',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_20, self.v_21, ceiling_height))
        self.surface_dining_exterior_wall_east = Surface(
            'Dining Exterior Wall East',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_21, self.v_22, ceiling_height))
        self.surface_dining_exterior_wall_south = Surface(
            'Dining Exterior Wall South',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_22, self.v_23, ceiling_height))
        self.surface_living_exterior_wall_east_with_northern_window = Surface(
            'Living Room Exterior Wall East With Northern Window',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_23, self.v_24, ceiling_height))
        self.surface_living_exterior_wall_north = Surface(
            'Living Room Exterior Wall North',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_24, self.v_25, ceiling_height))
        self.surface_living_exterior_wall_east_behind_chimney = Surface(
            'Living Room Exterior Wall East Behind Chimney',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_25, self.v_26, ceiling_height))
        self.surface_living_exterior_wall_south = Surface(
            'Living Room Exterior Wall South',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_26, self.v_27, ceiling_height))
        self.surface_living_and_gibson_exterior_wall_east = Surface(
            'Living And Gibs Exterior Wall East',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_27, self.v_28, ceiling_height))
        self.surface_gibson_exterior_wall_south = Surface(
            'Gibs Exterior Wall South',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_28, self.v_29, ceiling_height))
        self.surface_study_exterior_wall_east = Surface(
            'Study Exterior Wall East',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_29, self.v_30, ceiling_height))
        self.surface_study_exterior_wall_south = Surface(
            'Study Exterior Wall South With Window',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_30, self.v_31, ceiling_height))
        self.surface_study_exterior_wall_west = Surface(
            'Study Exterior Wall West',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_31, self.v_32, ceiling_height))
        self.surface_main_bath_exterior_wall_south = Surface(
            'Main Bath Exterior Wall South',
            self.zone_indoor, SurfaceType.WALL, self.construction_exterior_wall,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_wall_vertices(self.v_32, self.v_1, ceiling_height))
        # now the ceilings/roofs - need to fix this up later
        ceiling_vertex_list_ccw_from_above = [
            self.v_32,
            self.v_31,
            self.v_30,
            self.v_29,
            self.v_28,
            self.v_27,
            self.v_26,
            self.v_25,
            self.v_24,
            self.v_23,
            self.v_22,
            self.v_21,
            self.v_20,
            self.v_36,
            self.v_35,
            self.v_34,
            self.v_10,
            self.v_9,
            self.v_8,
            self.v_7,
            self.v_6,
            self.v_5,
            self.v_4,
            self.v_3,
            self.v_2,
            self.v_1
        ]
        ceiling_vertex_list_clockwise_from_above = ceiling_vertex_list_ccw_from_above[::-1]
        self.surface_ceiling_conditioned_space = Surface(
            'Conditioned Space Ceiling',
            self.zone_indoor, SurfaceType.CEILING, self.construction_ceiling,
            BoundaryConditionType.OTHER_ZONE, self.zone_attic, 0.0, False, False,
            self._add_height_to_vertices(ceiling_height, ceiling_vertex_list_ccw_from_above)
        )
        self.surface_ceiling_garage_space = Surface(
            'Garage Ceiling',
            self.zone_garage, SurfaceType.CEILING, self.construction_ceiling,
            BoundaryConditionType.OTHER_ZONE, self.zone_attic, 0.0, False, False,
            self._add_height_to_vertices(ceiling_height, [
                self.v_10,
                self.v_34,
                self.v_35,
                self.v_36,
                self.v_19,
                self.v_18,
                self.v_17,
                self.v_16,
                self.v_15,
                self.v_14,
                self.v_13,
                self.v_12,
                self.v_11
            ])
        )
        self.surface_floor_conditioned_space = Surface(
            'Conditioned Space Floor',
            self.zone_indoor, SurfaceType.FLOOR, self.construction_floor,
            BoundaryConditionType.GROUND, None, 1.0, False, False,
            self._add_height_to_vertices(0.0, ceiling_vertex_list_clockwise_from_above)
        )
        self.surface_floor_garage_space = Surface(
            'Garage Floor',
            self.zone_garage, SurfaceType.FLOOR, self.construction_garage_floor,
            BoundaryConditionType.GROUND, None, 1.0, False, False,
            self._add_height_to_vertices(0, [
                self.v_11,
                self.v_12,
                self.v_13,
                self.v_14,
                self.v_15,
                self.v_16,
                self.v_17,
                self.v_18,
                self.v_19,
                self.v_36,
                self.v_35,
                self.v_34,
                self.v_10
            ])
        )
        self.surface_eave_1 = Surface(
            'Roof Overhang 1 Above Entry',
            self.zone_attic, SurfaceType.FLOOR, self.construction_soffit,
            BoundaryConditionType.OUTDOORS, None, 1.0, True, True,
            self._add_height_to_vertices(ceiling_height, [
                self.v_39,
                self.v_42,
                self.v_43,
                self.v_9,
                self.v_8,
                self.v_7,
                self.v_6,
                self.v_5,
                self.v_4,
                self.v_3
            ])
        )
        self.surface_eave_2 = Surface(
            'Roof Overhang 2 Above Laundry and Garage',
            self.zone_attic, SurfaceType.FLOOR, self.construction_soffit,
            BoundaryConditionType.OUTDOORS, None, 1.0, True, True,
            self._add_height_to_vertices(ceiling_height, [
                self.v_43,
                self.v_44,
                self.v_45,
                self.v_46,
                self.v_47,
                self.v_49,
                self.v_50,
                self.v_51,
                self.v_16,
                self.v_15,
                self.v_14,
                self.v_13,
                self.v_12,
                self.v_11,
                self.v_10,
                self.v_9
            ])
        )
        self.surface_eave_3 = Surface(
            'Roof Overhang 3 Above Garage',
            self.zone_attic, SurfaceType.FLOOR, self.construction_soffit,
            BoundaryConditionType.OUTDOORS, None, 1.0, True, True,
            self._add_height_to_vertices(ceiling_height, [
                self.v_51,
                self.v_52,
                self.v_53,
                self.v_54,
                self.v_19,
                self.v_18,
                self.v_17,
                self.v_16
            ])
        )
        self.surface_eave_4 = Surface(
            'Roof Overhang 4 Above Patio',
            self.zone_attic, SurfaceType.FLOOR, self.construction_soffit,
            BoundaryConditionType.OUTDOORS, None, 1.0, True, True,
            self._add_height_to_vertices(ceiling_height, [
                self.v_54,
                self.v_55,
                self.v_56,
                self.v_57,
                self.v_58,
                self.v_27,
                self.v_26,
                self.v_25,
                self.v_24,
                self.v_23,
                self.v_22,
                self.v_21,
                self.v_20,
                self.v_19
            ])
        )
        self.surface_eave_5 = Surface(
            'Roof Overhang 5 Above Study',
            self.zone_attic, SurfaceType.FLOOR, self.construction_soffit,
            BoundaryConditionType.OUTDOORS, None, 1.0, True, True,
            self._add_height_to_vertices(ceiling_height, [
                self.v_58,
                self.v_59,
                self.v_60,
                self.v_61,
                self.v_62,
                self.v_63,
                self.v_37,
                self.v_38,
                self.v_39,
                self.v_3,
                self.v_2,
                self.v_1,
                self.v_32,
                self.v_31,
                self.v_30,
                self.v_29,
                self.v_28,
                self.v_27
            ])
        )
        fake_attic_ceiling_height = 6.2
        self.surface_fake_attic_wall_1 = Surface(
            'Fake Attic Wall 1',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_39, self.v_42, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_2 = Surface(
            'Fake Attic Wall 2',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_42, self.v_43, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_3 = Surface(
            'Fake Attic Wall 3',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_43, self.v_44, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_4 = Surface(
            'Fake Attic Wall 4',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_44, self.v_45, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_5 = Surface(
            'Fake Attic Wall 5',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_45, self.v_46, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_6 = Surface(
            'Fake Attic Wall 6',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_46, self.v_47, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_7 = Surface(
            'Fake Attic Wall 7',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_47, self.v_49, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_8 = Surface(
            'Fake Attic Wall 8',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_49, self.v_50, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_9 = Surface(
            'Fake Attic Wall 9',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_50, self.v_51, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_10 = Surface(
            'Fake Attic Wall 10',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_51, self.v_52, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_11 = Surface(
            'Fake Attic Wall 11',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_52, self.v_53, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_12 = Surface(
            'Fake Attic Wall 12',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_53, self.v_54, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_13 = Surface(
            'Fake Attic Wall 13',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_54, self.v_55, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_14 = Surface(
            'Fake Attic Wall 14',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_55, self.v_56, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_15 = Surface(
            'Fake Attic Wall 15',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_56, self.v_57, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_16 = Surface(
            'Fake Attic Wall 16',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_57, self.v_58, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_17 = Surface(
            'Fake Attic Wall 17',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_58, self.v_59, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_18 = Surface(
            'Fake Attic Wall 18',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_59, self.v_60, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_19 = Surface(
            'Fake Attic Wall 19',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_60, self.v_61, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_20 = Surface(
            'Fake Attic Wall 20',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_61, self.v_62, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_21 = Surface(
            'Fake Attic Wall 21',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_62, self.v_63, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_22 = Surface(
            'Fake Attic Wall 22',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_63, self.v_37, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_23 = Surface(
            'Fake Attic Wall 23',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_37, self.v_38, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_wall_24 = Surface(
            'Fake Attic Wall 24',
            self.zone_attic, SurfaceType.WALL, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.5, True, True,
            self._build_fake_attic_wall_vertices(self.v_38, self.v_39, ceiling_height, fake_attic_ceiling_height))
        self.surface_fake_attic_ceiling = Surface(
            'Fake Attic Ceiling',
            self.zone_attic, SurfaceType.ROOF, self.construction_roof,
            BoundaryConditionType.OUTDOORS, None, 0.0, True, True,
            self._add_height_to_vertices(fake_attic_ceiling_height, [
                # skip 48, 40
                self.v_63,
                self.v_62,
                self.v_61,
                self.v_60,
                self.v_59,
                self.v_58,
                self.v_57,
                self.v_56,
                self.v_55,
                self.v_54,
                self.v_53,
                self.v_52,
                self.v_51,
                self.v_50,
                self.v_49,
                self.v_47,
                self.v_46,
                self.v_45,
                self.v_44,
                self.v_43,
                self.v_42,
                self.v_41,
                self.v_39,
                self.v_38,
                self.v_37
            ])
        )
        all_surfaces = [
            self.surface_main_bath_exterior_wall_west,
            self.surface_dax_exterior_wall_south,
            self.surface_dax_exterior_wall_west,
            self.surface_dax_exterior_wall_north,
            self.surface_entry_exterior_wall,
            self.surface_office_exterior_wall_south,
            self.surface_office_exterior_wall_west,
            self.surface_office_exterior_wall_north,
            self.surface_utility_exterior_wall_west,
            self.inter_zone_surface_small_garage,
            self.inter_zone_surface_intermediate,
            self.inter_zone_surface_large_garage,
            self.surface_garage_exterior_wall_south_a,
            self.surface_garage_exterior_wall_west_a,
            self.surface_garage_exterior_wall_south_b,
            self.surface_garage_exterior_wall_west_b_with_window,
            self.surface_garage_exterior_wall_north_a,
            self.surface_garage_exterior_wall_west_c,
            self.surface_garage_exterior_wall_north_b_with_small_garage_and_man_door,
            self.surface_garage_exterior_wall_west_d,
            self.surface_garage_exterior_wall_north_c_with_large_garage_door,
            self.surface_garage_exterior_wall_east,
            self.surface_master_exterior_wall_east,
            self.surface_dining_exterior_wall_north,
            self.surface_dining_exterior_wall_east,
            self.surface_dining_exterior_wall_south,
            self.surface_living_exterior_wall_east_with_northern_window,
            self.surface_living_exterior_wall_north,
            self.surface_living_exterior_wall_east_behind_chimney,
            self.surface_living_exterior_wall_south,
            self.surface_living_and_gibson_exterior_wall_east,
            self.surface_gibson_exterior_wall_south,
            self.surface_study_exterior_wall_east,
            self.surface_study_exterior_wall_south,
            self.surface_study_exterior_wall_west,
            self.surface_main_bath_exterior_wall_south,
            self.surface_ceiling_conditioned_space,
            self.surface_ceiling_garage_space,
            self.surface_floor_conditioned_space,
            self.surface_floor_garage_space,
            self.surface_eave_1, self.surface_eave_2, self.surface_eave_3, self.surface_eave_4, self.surface_eave_5,
            self.surface_fake_attic_wall_1,
            self.surface_fake_attic_wall_2,
            self.surface_fake_attic_wall_3,
            self.surface_fake_attic_wall_4,
            self.surface_fake_attic_wall_5,
            self.surface_fake_attic_wall_6,
            self.surface_fake_attic_wall_7,
            self.surface_fake_attic_wall_8,
            self.surface_fake_attic_wall_9,
            self.surface_fake_attic_wall_10,
            self.surface_fake_attic_wall_11,
            self.surface_fake_attic_wall_12,
            self.surface_fake_attic_wall_13,
            self.surface_fake_attic_wall_14,
            self.surface_fake_attic_wall_15,
            self.surface_fake_attic_wall_16,
            self.surface_fake_attic_wall_17,
            self.surface_fake_attic_wall_18,
            self.surface_fake_attic_wall_19,
            self.surface_fake_attic_wall_20,
            self.surface_fake_attic_wall_21,
            self.surface_fake_attic_wall_22,
            self.surface_fake_attic_wall_23,
            self.surface_fake_attic_wall_24,
            self.surface_fake_attic_ceiling,
        ]
        for s in all_surfaces:
            bc_instance_name = ''
            if s.outdoor_bc_instance:
                bc_instance_name = s.outdoor_bc_instance.name
            sun_exposed_string = 'NoSun'
            if s.sun_exposed:
                sun_exposed_string = 'SunExposed'
            wind_exposed_string = 'NoWind'
            if s.wind_exposed:
                wind_exposed_string = 'WindExposed'
            vertex_list = []
            for i, v in enumerate(s.vertices):
                vertex_list.extend([v.part_2d.x, v.part_2d.y, v.height])
            self._add_idf_object(
                'BuildingSurface:Detailed',
                s.name,
                SurfaceType.to_building_surface_key_choice(s.surface_type),
                s.construction.name, s.zone.name,
                BoundaryConditionType.to_building_surface_key_choice(s.outdoor_bc_type), bc_instance_name,
                sun_exposed_string, wind_exposed_string, s.view_factor_to_ground, len(s.vertices), *vertex_list
            )

    def _setup_windows_and_doors(self):
        # dax window
        v_1 = Vertex2D('alpha', 27.806904, 48.657764)
        v_2 = Vertex2D('beta', 28.331414, 49.467262)
        window_bottom = 0.67  # assumed
        window_top = 2.5  # assumed
        self.window_dax = Window(
            'Dax Window', self.construction_operable_window, self.surface_dax_exterior_wall_west,
            self._build_window_vertices(v_1, v_2, window_bottom, window_top)
        )
        # office window
        v_1 = Vertex2D('gamma', 32.667194, 52.106576)
        v_2 = Vertex2D('delta', 33.578038, 53.515006)
        window_bottom = 0.67  # assumed
        window_top = 2.5  # assumed
        self.window_office = Window(
            'Office Window', self.construction_operable_window, self.surface_office_exterior_wall_west,
            self._build_window_vertices(v_1, v_2, window_bottom, window_top)
        )
        # laundry window
        v_1 = Vertex2D('epsilon', 35.383978, 55.188866)
        v_2 = Vertex2D('zeta', 35.88131, 55.958486)
        window_bottom = 1.2  # assumed
        window_top = 2.5  # assumed
        self.window_laundry = Window(
            'Laundry Window', self.construction_inoperable_window, self.surface_utility_exterior_wall_west,
            self._build_window_vertices(v_1, v_2, window_bottom, window_top)
        )
        # garage window
        v_1 = Vertex2D('eta', 36.946078, 60.320936)
        v_2 = Vertex2D('theta', 37.442394, 61.089032)
        window_bottom = 0.67  # assumed
        window_top = 2.5  # assumed
        self.window_garage = Window(
            'Garage Window', self.construction_operable_window, self.surface_garage_exterior_wall_west_b_with_window,
            self._build_window_vertices(v_1, v_2, window_bottom, window_top)
        )
        # master closet window
        v_1 = Vertex2D('iota', 46.589442, 53.66639)
        v_2 = Vertex2D('kappa', 45.953172, 52.68214)
        window_bottom = 2  # assumed
        window_top = 2.5  # assumed
        self.window_master_closet = Window(
            'Master Closet Window', self.construction_inoperable_window, self.surface_master_exterior_wall_east,
            self._build_window_vertices(v_1, v_2, window_bottom, window_top)
        )
        # master bedroom window
        v_1 = Vertex2D('lambda', 44.894246, 51.042062)
        v_2 = Vertex2D('mu', 43.952922, 49.58969)
        window_bottom = 0.67  # assumed
        window_top = 2.5  # assumed
        self.window_master_bedroom = Window(
            'Master Bedroom Window', self.construction_operable_window, self.surface_master_exterior_wall_east,
            self._build_window_vertices(v_1, v_2, window_bottom, window_top)
        )
        # dining room window including door
        v_1 = Vertex2D('nu', 43.289728, 47.388272)
        v_2 = Vertex2D('xi', 42.2529, 45.791882)
        window_bottom = 0.05  # assumed
        window_top = 2.0  # assumed
        self.window_dining_and_door = Window(
            'Dining Window Including Door', self.construction_inoperable_window, self.surface_dining_exterior_wall_east,
            self._build_window_vertices(v_1, v_2, window_bottom, window_top)
        )
        # living room window northern
        v_1 = Vertex2D('omicron', 41.030652, 45.069506)
        v_2 = Vertex2D('pi', 40.547798, 44.322746)
        window_bottom = 0.67  # assumed
        window_top = 2.8  # assumed
        self.window_living_room_northern = Window(
            'Living Room Northern Window', self.construction_inoperable_window,
            self.surface_living_exterior_wall_east_with_northern_window,
            self._build_window_vertices(v_1, v_2, window_bottom, window_top)
        )
        # living room window southern
        v_1 = Vertex2D('rho', 39.445438, 42.618152)
        v_2 = Vertex2D('sigma', 38.962584, 41.869614)
        window_bottom = 0.67  # assumed
        window_top = 2.8  # assumed
        self.window_living_room_southern = Window(
            'Living Room Southern Window', self.construction_inoperable_window,
            self.surface_living_and_gibson_exterior_wall_east,
            self._build_window_vertices(v_1, v_2, window_bottom, window_top)
        )
        # gibs window
        v_1 = Vertex2D('tau', 37.942266, 40.290242)
        v_2 = Vertex2D('upsilon', 37.460428, 39.544498)
        window_bottom = 0.67  # assumed
        window_top = 2.5  # assumed
        self.window_gibs = Window(
            'Gibs Window', self.construction_operable_window, self.surface_living_and_gibson_exterior_wall_east,
            self._build_window_vertices(v_1, v_2, window_bottom, window_top)
        )
        # study window
        v_1 = Vertex2D('phi', 32.029908, 40.455596)
        v_2 = Vertex2D('chi', 31.517336, 40.786558)
        window_bottom = 0.67  # assumed
        window_top = 2.5  # assumed
        self.window_study = Window(
            'Study Window', self.construction_inoperable_window, self.surface_study_exterior_wall_south,
            self._build_window_vertices(v_1, v_2, window_bottom, window_top)
        )
        # main bath window
        v_1 = Vertex2D('psi', 29.49448, 42.941494)
        v_2 = Vertex2D('omega', 28.512262, 43.574462)
        window_bottom = 2  # assumed
        window_top = 2.5  # assumed
        self.window_main_bath = Window(
            'Main Bath Window', self.construction_inoperable_window, self.surface_main_bath_exterior_wall_south,
            self._build_window_vertices(v_1, v_2, window_bottom, window_top)
        )
        # entry door
        v_1 = Vertex2D('!', 32.243522, 49.206912)
        v_2 = Vertex2D('@', 32.74187, 49.9745)
        door_bottom = 0.05  # assumed
        door_top = 2  # assumed
        self.door_entry = Door(
            'Entry Door', self.construction_door, self.surface_entry_exterior_wall,
            self._build_window_vertices(v_1, v_2, door_bottom, door_top)
        )
        # garage door small
        v_1 = Vertex2D('#', 40.109648, 62.96279)
        v_2 = Vertex2D('$', 42.114038, 61.671454)
        door_bottom = 0.05  # assumed
        door_top = 2  # assumed
        self.door_garage_small = Door(
            'Small Garage Door', self.construction_garage_door,
            self.surface_garage_exterior_wall_north_b_with_small_garage_and_man_door,
            self._build_window_vertices(v_1, v_2, door_bottom, door_top)
        )
        # garage man door
        v_1 = Vertex2D('%', 42.582084, 61.3664)
        v_2 = Vertex2D('^', 43.26636, 60.924694)
        door_bottom = 0.05  # assumed
        door_top = 2  # assumed
        self.door_garage_man = Door(
            'Garage Man Door', self.construction_door,
            self.surface_garage_exterior_wall_north_b_with_small_garage_and_man_door,
            self._build_window_vertices(v_1, v_2, door_bottom, door_top)
        )
        # garage door large
        v_1 = Vertex2D('&', 46.325028, 63.785496)
        v_2 = Vertex2D('*', 50.356516, 61.181996)
        door_bottom = 0.05  # assumed
        door_top = 2  # assumed
        self.door_garage_large = Door(
            'Large Garage Door', self.construction_garage_door,
            self.surface_garage_exterior_wall_north_c_with_large_garage_door,
            self._build_window_vertices(v_1, v_2, door_bottom, door_top)
        )

        all_windows = [
            self.window_dax,
            self.window_office,
            self.window_laundry,
            self.window_garage,
            self.window_master_closet,
            self.window_master_bedroom,
            self.window_dining_and_door,
            self.window_living_room_northern,
            self.window_living_room_southern,
            self.window_gibs,
            self.window_study,
            self.window_main_bath
        ]
        for w in all_windows:
            vertex_list = []
            for v in w.vertices:
                vertex_list.extend([v.part_2d.x, v.part_2d.y, v.height])
            self._add_idf_object(
                'FenestrationSurface:Detailed',
                w.name, 'Window', w.construction.name, w.base_surface.name, '', 'AutoCalculate', '', '',
                len(w.vertices), *vertex_list
            )
        all_doors = [
            self.door_entry,
            self.door_garage_small,
            self.door_garage_man,
            self.door_garage_large
        ]
        for d in all_doors:
            vertex_list = []
            for v in d.vertices:
                vertex_list.extend([v.part_2d.x, v.part_2d.y, v.height])
            self._add_idf_object(
                'FenestrationSurface:Detailed',
                d.name, 'Door', d.construction.name, d.base_surface.name, '', 'AutoCalculate', '', '',
                len(d.vertices), *vertex_list
            )

    def _setup_outputs(self):
        # setup outputs
        self.output_variables = [
            OutputVariable('Site Outdoor Air DryBulb Temperature', '*'),
            OutputVariable('Site Wind Speed', '*'),
            OutputVariable('Site Horizontal Infrared Radiation Rate per Area', '*'),
            OutputVariable('Site Precipitation Depth', '*'),
            # OutputVariable('Site Daylight Saving Time Status', '*'),
            # OutputVariable('Site Day Type Index', '*'),
            OutputVariable('Zone Mean Air Temperature', '*'),
            OutputVariable('Zone Mean Radiant Temperature', '*'),
            OutputVariable('Zone Predicted Sensible Load to Setpoint Heat Transfer Rate', '*'),
            OutputVariable('Zone Predicted Sensible Load to Heating Setpoint Heat Transfer Rate', '*'),
            OutputVariable('Zone Predicted Sensible Load to Cooling Setpoint Heat Transfer Rate', '*'),
            # OutputVariable('Surface Inside Face Temperature', '*'),
            # OutputVariable('Surface Outside Face Temperature', '*'),
            # OutputVariable('Surface Outside Face Sunlit Fraction', '*'),
            OutputVariable('Zone Thermostat Heating Setpoint Temperature', '*'),
            OutputVariable('Zone Thermostat Cooling Setpoint Temperature', '*'),
            OutputVariable('Zone Air Terminal Sensible Heating Rate', '*'),
            OutputVariable('Zone Air Terminal Sensible Cooling Rate', '*'),
            OutputVariable('Fan Air Mass Flow Rate', '*'),
            OutputVariable('Cooling Coil Total Cooling Rate', '*'),
            OutputVariable('Cooling Coil Sensible Cooling Rate', '*'),
            OutputVariable('Cooling Coil Electric Power', '*'),
            OutputVariable('Heating Coil Heating Rate', '*'),
            OutputVariable('Heating Coil Electric Power', '*'),
            OutputVariable('Schedule Value', '*'),
        ]
        self.output_meters = [
            OutputMeter('Electricity:Facility'),
        ]
        # write IDF
        for ov in self.output_variables:
            self._add_idf_object('Output:Variable', ov.instance_key, ov.variable_name, 'hourly')
        for om in self.output_meters:
            self._add_idf_object('Output:Meter:MeterFileOnly', om.meter_name, 'monthly')
        self._add_idf_object('Output:VariableDictionary', 'IDF')
        self._add_idf_object('Output:Surfaces:Drawing', 'DXF:WireFrame')
        self._add_idf_object('Output:Constructions', 'Constructions')
        self._add_idf_object('OutputControl:Table:Style', 'All')
        self._add_idf_object('Output:Table:SummaryReports', 'AllSummary')
        self._add_idf_object('Output:SQLite', 'SimpleAndTabular')
        self._add_idf_object('Output:Diagnostics', 'DisplayExtraWarnings', 'DisplayUnusedSchedules')

    def _setup_scheduling(self):
        self.schedule_type_any = ScheduleTypeLimit('AnyNumber')
        self.schedule_type_frac = ScheduleTypeLimit('Fraction', 0, 1)
        # self.schedule_type_on_off = ScheduleTypeLimit('OnOff', 0, 1, 'Discrete')
        for s in [self.schedule_type_any, self.schedule_type_frac]:
            min_string = ''
            if s.min != -1:
                min_string = str(s.min)
            max_string = ''
            if s.max != -1:
                max_string = str(s.max)
            self._add_idf_object('ScheduleTypeLimits', s.name, min_string, max_string, s.discrete_or_continuous)
        self.schedule_infiltration = ScheduleConstant('InfiltrationSchedule', self.schedule_type_frac, 1)
        self.schedule_activity_dad = ScheduleConstant('ScheduleDadActivity', self.schedule_type_any, 115)
        self.schedule_activity_mom = ScheduleConstant('ScheduleMomActivity', self.schedule_type_any, 100)
        self.schedule_activity_gibs = ScheduleConstant('ScheduleGibsActivity', self.schedule_type_any, 115)
        self.schedule_activity_dax = ScheduleConstant('ScheduleDaxActivity', self.schedule_type_any, 115)
        self.schedule_equipment_office_computers = ScheduleConstant('OfficeCompSchedule', self.schedule_type_frac, 1.0)
        self.schedule_dual_set_point = ScheduleConstant('ScheduleDualSetPoint', self.schedule_type_any, 4)
        self.schedule_heating_set_point = ScheduleConstant('HeatingSetpoint', self.schedule_type_any, 22.22)
        self.schedule_cooling_set_point = ScheduleConstant('CoolingSetpoint', self.schedule_type_any, 23.9)
        self.schedule_equip_fridge = ScheduleConstant('FridgeSchedule', self.schedule_type_any, 1.0)
        self.schedule_equip_other_kitchen = ScheduleConstant('OtherKitchenSchedule', self.schedule_type_any, 1.0)
        all_constant_schedules = [
            self.schedule_infiltration,
            self.schedule_activity_dad, self.schedule_activity_mom,
            self.schedule_activity_gibs, self.schedule_activity_dax,
            self.schedule_equipment_office_computers,
            self.schedule_dual_set_point, self.schedule_heating_set_point, self.schedule_cooling_set_point,
            self.schedule_equip_fridge, self.schedule_equip_other_kitchen
        ]
        for s in all_constant_schedules:
            self._add_idf_object('Schedule:Constant', s.name, s.type_limits.name, s.value)
        self.schedule_occupancy_dad = ScheduleCompact(
            'ScheduleDadInMainZone', self.schedule_type_frac, [
                'Through: 04/30', 'For: AllDays', 'Until: 24:00', 0.9,
                'Through: 09/30',
                'For: WeekDays SummerDesignDay', 'Until: 16:00', 0.9, 'Until: 20:00', 0.6, 'Until: 24:00', 0.9,
                'For: AllOtherDays', 'Until: 24:00', 0.7,
                'Through: 12/31', 'For: AllDays', 'Until: 24:00', 0.9,
            ]
        )
        self.schedule_occupancy_mom = ScheduleCompact(
            'ScheduleMomInMainZone', self.schedule_type_frac, [
                'Through: 04/30', 'For: AllDays', 'Until: 24:00', 0.9,
                'Through: 09/30',
                'For: WeekDays SummerDesignDay', 'Until: 16:00', 0.9, 'Until: 20:00', 0.6, 'Until: 24:00', 0.9,
                'For: AllOtherDays', 'Until: 24:00', 0.7,
                'Through: 12/31', 'For: AllDays', 'Until: 24:00', 0.9,
            ]
        )
        self.schedule_occupancy_gibs = ScheduleCompact(
            'ScheduleGibsInMainZone', self.schedule_type_frac, [
                'Through: 05/15',
                'For: WeekDays', 'Until: 08:00', 1.0, 'Until: 15:00', 0.1, 'Until: 24:00', 0.9,
                'For: AllOtherDays', 'Until: 24:00', 0.8,
                'Through: 09/01',
                'For: AllDays', 'Until: 24:00', 0.7,
                'Through: 12/31',
                'For: WeekDays', 'Until: 08:00', 1.0, 'Until: 15:00', 0.1, 'Until: 24:00', 0.9,
                'For: AllOtherDays', 'Until: 24:00', 0.8,
            ]
        )
        self.schedule_occupancy_dax = ScheduleCompact(
            'ScheduleDaxInMainZone', self.schedule_type_frac, [
                'Through: 05/15',
                'For: WeekDays', 'Until: 08:00', 1.0, 'Until: 15:00', 0.1, 'Until: 24:00', 0.9,
                'For: AllOtherDays', 'Until: 24:00', 0.8,
                'Through: 09/01',
                'For: AllDays', 'Until: 24:00', 0.7,
                'Through: 12/31',
                'For: WeekDays', 'Until: 08:00', 1.0, 'Until: 15:00', 0.1, 'Until: 24:00', 0.9,
                'For: AllOtherDays', 'Until: 24:00', 0.8,
            ]
        )
        self.schedule_lights_dax = ScheduleCompact(
            'DaxLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_gibs = ScheduleCompact(
            'GibsLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_main_bath = ScheduleCompact(
            'MainBathLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.3, 'Until: 09:00', 0.3,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.3
            ]
        )
        self.schedule_lights_study = ScheduleCompact(
            'StudyLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_kids_hall = ScheduleCompact(
            'HallLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_entry = ScheduleCompact(
            'EntryLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_living = ScheduleCompact(
            'LivingLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_office = ScheduleCompact(
            'OfficeLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_kitchen = ScheduleCompact(
            'KitchenLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_dining = ScheduleCompact(
            'DiningLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_master_bedroom = ScheduleCompact(
            'MasterBedroomLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_master_bath = ScheduleCompact(
            'MasterBathLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_mom_closet = ScheduleCompact(
            'MomClosetLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_dad_closet = ScheduleCompact(
            'DadClosetLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_utility = ScheduleCompact(
            'UtilityLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_lights_garage = ScheduleCompact(
            'GarageLightSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 07:00', 0.05, 'Until: 09:00', 0.2,
                'Until: 18:00', 0.05, 'Until: 21:00', 0.5, 'Until: 24:00', 0.05
            ]
        )
        self.schedule_equip_dishwasher = ScheduleCompact(
            'DishwasherSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 02:00', 0, 'Until: 04:00', 1, 'Until: 24:00', 0
            ]
        )
        self.schedule_equip_oven = ScheduleCompact(
            'OvenSchedule', self.schedule_type_frac, [
                'Through: 12/31', 'For: AllDays', 'Until: 16:30', 0.1, 'Until: 18:00', 0.8, 'Until: 24:00', 0
            ]
        )
        all_compact_schedules = [
            self.schedule_occupancy_dad, self.schedule_occupancy_mom,
            self.schedule_occupancy_gibs, self.schedule_occupancy_dax,
            self.schedule_lights_dax, self.schedule_lights_gibs,
            self.schedule_lights_main_bath,
            self.schedule_lights_study,
            self.schedule_lights_kids_hall,
            self.schedule_lights_entry,
            self.schedule_lights_living,
            self.schedule_lights_office,
            self.schedule_lights_kitchen,
            self.schedule_lights_dining,
            self.schedule_lights_master_bedroom, self.schedule_lights_master_bath,
            self.schedule_lights_mom_closet, self.schedule_lights_dad_closet,
            self.schedule_lights_utility,
            self.schedule_lights_garage,
            self.schedule_equip_dishwasher, self.schedule_equip_oven
        ]
        for s in all_compact_schedules:
            self._add_idf_object('Schedule:Compact', s.name, s.type_limits.name, *s.fields)

    def _setup_internal_gains(self):
        # infiltration
        assumed_effective_leakage_area = 500  # cm^2
        assumed_stack_coefficient = 0.000145  # single story house value, Handbook 2017 (pg 16.24)
        infiltration_house_temp = 21.1  # at design infiltration conditions
        infiltration_outdoor_temp = -11  # at design infiltration conditions
        delta_t = abs(infiltration_house_temp - infiltration_outdoor_temp)
        assumed_wind_coefficient = 0.000246  # single story, class 2 shelter (rural, no obstructions)
        average_wind_speed = 6  # m/s
        design_infiltration_flow_rate = (assumed_effective_leakage_area / 1000) * sqrt(
            assumed_stack_coefficient * delta_t + assumed_wind_coefficient * average_wind_speed ** 2
        )
        self.infiltration_zone = Infiltration(
            'Main Zone Infiltration', self.zone_indoor, self.schedule_infiltration, design_infiltration_flow_rate
        )
        self.infiltration_garage = Infiltration(
            'Garage Infiltration', self.zone_garage, self.schedule_infiltration, design_infiltration_flow_rate
        )
        self.infiltration_attic = Infiltration(
            'Attic Infiltration', self.zone_attic, self.schedule_infiltration, design_infiltration_flow_rate
        )
        for i in [self.infiltration_zone, self.infiltration_garage, self.infiltration_attic]:
            self._add_idf_object(
                'ZoneInfiltration:DesignFlowRate',
                i.name, i.zone.name, i.schedule.name,
                'Flow/Zone', i.design_volume_flow_rate, '', '', '',
                0, 0, 0.2237, 0
            )
        # people
        self.person_dad_main_zone = Person(
            'Dad', self.zone_indoor, self.schedule_occupancy_dad, self.schedule_activity_dad
        )
        self.person_mom_main_zone = Person(
            'Mom', self.zone_indoor, self.schedule_occupancy_mom, self.schedule_activity_mom
        )
        self.person_gibs_main_zone = Person(
            'Gibs', self.zone_indoor, self.schedule_occupancy_gibs, self.schedule_activity_gibs
        )
        self.person_dax_main_zone = Person(
            'Dax', self.zone_indoor, self.schedule_occupancy_dax, self.schedule_activity_dax
        )
        all_people = [
            self.person_dad_main_zone, self.person_mom_main_zone, self.person_gibs_main_zone, self.person_dax_main_zone
        ]
        for p in all_people:
            self._add_idf_object(
                'People', p.name, p.zone.name, p.in_zone_schedule.name,
                'People', 1, '', '', 0.3, '', p.activity_schedule.name
            )
        # interior lights
        self.lights_dax = Lights('Dax Lights', self.zone_indoor, self.schedule_lights_dax, 100)
        self.lights_gibs = Lights('Gibs Lights', self.zone_indoor, self.schedule_lights_gibs, 100)
        self.lights_main_bath = Lights('Main Bath Lights', self.zone_indoor, self.schedule_lights_main_bath, 120)
        self.lights_study = Lights('Study Lights', self.zone_indoor, self.schedule_lights_study, 60)
        self.lights_hall = Lights('Hall Lights', self.zone_indoor, self.schedule_lights_kids_hall, 100)
        self.lights_entry = Lights('Entry Lights', self.zone_indoor, self.schedule_lights_entry, 120)
        self.lights_living = Lights('Living Room Lights', self.zone_indoor, self.schedule_lights_living, 200)
        self.lights_office = Lights('Office Lights', self.zone_indoor, self.schedule_lights_office, 100)
        self.lights_kitchen = Lights('Kitchen Lights', self.zone_indoor, self.schedule_lights_kitchen, 150)
        self.lights_dining = Lights('Dining Room Lights', self.zone_indoor, self.schedule_lights_dining, 120)
        self.lights_master_bed = Lights('Master Bed Lights', self.zone_indoor, self.schedule_lights_master_bedroom, 120)
        self.lights_master_bath = Lights('Master Bath Lights', self.zone_indoor, self.schedule_lights_master_bath, 100)
        self.lights_mom_closet = Lights('Mom Closet Lights', self.zone_indoor, self.schedule_lights_mom_closet, 60)
        self.lights_dad_closet = Lights('Dad Closet Lights', self.zone_indoor, self.schedule_lights_dad_closet, 60)
        self.lights_utility = Lights('Utility Lights', self.zone_indoor, self.schedule_lights_utility, 100)
        self.lights_garage = Lights('Garage Lights', self.zone_indoor, self.schedule_lights_garage, 200)
        all_interior_lights = [
            self.lights_dax,
            self.lights_gibs,
            self.lights_main_bath,
            self.lights_study,
            self.lights_hall,
            self.lights_entry,
            self.lights_living,
            self.lights_office,
            self.lights_kitchen,
            self.lights_dining,
            self.lights_master_bed,
            self.lights_master_bath,
            self.lights_mom_closet,
            self.lights_dad_closet,
            self.lights_utility,
            self.lights_garage,
        ]
        for light in all_interior_lights:
            self._add_idf_object(
                'Lights', light.name, light.zone.name, light.schedule.name, 'LightingLevel', light.design_level,
                '', '', 0.0, light.fraction_radiant, light.fraction_visible, 0, 'GeneralLights'
            )
        self.equip_office_comps = Equipment(  # incl both comps, router, printer, speakers
            'Office computers', self.zone_indoor, self.schedule_equipment_office_computers, 600
        )
        self.equip_kitchen_dishwasher = Equipment(
            'Dishwasher', self.zone_indoor, self.schedule_equip_dishwasher, 300, 0.3, 0.4
        )
        self.equip_kitchen_oven = Equipment(
            'StoveOven', self.zone_indoor, self.schedule_equip_oven, 5000, 0.3, 0.1
        )
        self.equip_kitchen_fridge = Equipment(
            'Fridge', self.zone_indoor, self.schedule_equip_fridge, 100, 0.3, 0.1
        )
        self.equip_kitchen_others = Equipment(  # blender, coffee maker, etc.
            'OtherKitchenEquipment', self.zone_indoor, self.schedule_equip_other_kitchen, 100, 0.3, 0.0
        )
        all_equipment = [
            self.equip_office_comps,
            self.equip_kitchen_dishwasher,
            self.equip_kitchen_oven,
            self.equip_kitchen_fridge,
            self.equip_kitchen_others
        ]
        for equip in all_equipment:
            self._add_idf_object(
                'ElectricEquipment', equip.name, equip.zone.name, equip.schedule.name, 'EquipmentLevel',
                equip.design_level, '', '', equip.fraction_latent, equip.fraction_radiant, 0
            )

    def _water_use(self):
        # water heater, water usage, etc
        pass

    def _setup_hvac(self):
        # hvac unit is:
        # Carrier Sentry - 4 Ton 14 SEER Residential Heat Pump Condensing Unit
        # https://www.carrierenterprise.com/carrier-4-ton-14-seer-single-stage-heat-pump-condenser-with-puron-refrigerant-ch14nb04800g  # noqa: E501

        # Outdoor Unit:
        #   Model: CH14NB04800GAAAA
        #   Serial: 4616X84977
        #   Condenser Motor HP: 1/4 HP
        #   Condenser Motor RPM: 1110
        #   Condenser Motor Type: Permanent Split Compressor
        #   Cooling Capacity: 46000
        #   Cooling Capacity Range: 44500
        #   Cooling Rated Capacity Btu/h: 48000
        #   COP: 3.64-3.94
        #   EER: 11.5-12.5
        #   Full Load Amps: 1.45
        #   Heating Capacity: 43500
        #   HSPF: 8.2-9
        #   Metering Device: TXV
        #   Motor Type: Direct Drive
        #   Phase: Single
        #   Rated Load Amps: 19
        #   Refrigerant: R-410a
        #   Rows: 2
        #   SEER: 14
        #   Sound Level (dBA): 79
        #   Stage: Single
        #   Tonnage: 4
        #   Voltage: 208-230 VAC
        #
        # Indoor Unit:
        #   Heat Package In This Unit: KFCEH3101C15A
        #   Model: FB4CNF048
        #   Serial: 1516A83297
        #   Motor HP: 0.75
        #   Motor Full Load Amps: 6
        #   Static Pressure: 0.2 inH2O
        #
        # AHRI: https://www.ahridirectory.org/Search/SearchHome
        #   AHRI Certified Reference Number: 7835942
        #   Manufacturer Type: Systems
        #   AHRI Type: HRCU-A-CB
        #   Outdoor Unit Model Number: CARRIER  CH14NB048****A
        #   Brand Name: CARRIER
        #   Indoor Unit Model Number: FB4CNF048L+TXV
        #   Cooling Capacity (A2) - Single or High Stage (95F), Btu/h: 45500
        #   SEER: 14.00
        #   EER (A2) (95F): 11.70
        #   Heating Capacity (H12) - (47F), Btu/h: 44500
        #   HSPF (Region IV): 8.20
        #   Heating Capacity (H32) - (17F), Btu/h: 27800
        #   Indoor Full-Load Air Volume Rate (A2 StandardCFM): 1400

        # set up some system properties
        system_air_volume_flow_rate_cfm = 1400  # CFM
        rated_cooling_capacity_btu_h = 45500
        rated_heating_capacity_btu_h = 44500
        rated_heating_capacity_watts = rated_heating_capacity_btu_h * 0.29
        rated_cooling_capacity_watts = rated_cooling_capacity_btu_h * 0.29
        indoor_unit_static_pressure_inches = 0.2
        static_pressure_pascals = indoor_unit_static_pressure_inches * 249
        sys_vol_flow = system_air_volume_flow_rate_cfm * 0.00047194745
        max_supply_temp_for_supplemental_heater = 40
        seer_cooling_btu_per_watt = 14
        cop_cooling = seer_cooling_btu_per_watt / 3.412
        hspf_heating_btu_per_watt = 8.2
        cop_heating = hspf_heating_btu_per_watt / 3.412
        min_outdoor_temp_for_compressor = -8
        rated_shr = 0.7  # assumed
        supplemental_heater_capacity_watts = 10000  # assumed
        defrost_time_period = 0.06
        self._add_idf_object(
            'ThermostatSetpoint:DualSetpoint',
            'ThermostatControl', 'HeatingSetpoint', 'CoolingSetpoint'
        )
        self._add_idf_object(
            'ZoneControl:Thermostat',
            'Thermostat', 'Indoor', 'ScheduleDualSetPoint', 'ThermostatSetpoint:DualSetpoint', 'ThermostatControl'
        )
        self._add_idf_object(
            'ZoneHVAC:EquipmentConnections',
            'Indoor', 'HVACEquipment', 'ZoneSupplyAirNode', '', 'ZoneAirNode', 'ZoneReturnAirNode'
        )
        self._add_idf_object(
            'ZoneHVAC:EquipmentList',
            'HVACEquipment', 'SequentialLoad', 'ZoneHVAC:AirDistributionUnit', 'ADU', 1, 1
        )
        self._add_idf_object(
            'ZoneHVAC:AirDistributionUnit',
            'ADU', 'ZoneSupplyAirNode', 'AirTerminal:SingleDuct:ConstantVolume:NoReheat', 'AirTerminal'
        )
        self._add_idf_object(
            'AirTerminal:SingleDuct:ConstantVolume:NoReheat',
            'AirTerminal', '', 'ZoneEquipmentInlet', 'ZoneSupplyAirNode', sys_vol_flow
        )
        self._add_idf_object(
            'AirLoopHVAC',
            'HeatPump', '', '', sys_vol_flow, 'Branches', '', 'AirLoopSupplyInlet', 'AirLoopDemandOutlet',
            'AirLoopDemandInlet', 'AirLoopSupplyOutlet'
        )
        self._add_idf_object(
            'BranchList',
            'Branches', 'Branch'
        )
        self._add_idf_object(
            'Branch',
            'Branch', '', 'AirLoopHVAC:UnitaryHeatPump:AirToAir', 'HeatPump',
            'AirLoopSupplyInlet', 'AirLoopSupplyOutlet'
        )
        self._add_idf_object(
            'AirLoopHVAC:SupplyPath',
            'HPSupplyPath', 'AirLoopDemandInlet', 'AirLoopHVAC:ZoneSplitter', 'ZoneSplitter'
        )
        self._add_idf_object(
            'AirLoopHVAC:ZoneSplitter',
            'ZoneSplitter', 'AirLoopDemandInlet', 'ZoneEquipmentInlet'
        )
        self._add_idf_object(
            'AirLoopHVAC:ReturnPath',
            'HPReturnPath', 'AirLoopDemandOutlet', 'AirLoopHVAC:ZoneMixer', 'ZoneMixer'
        )
        self._add_idf_object(
            'AirLoopHVAC:ZoneMixer',
            'ZoneMixer', 'AirLoopDemandOutlet', 'ZoneReturnAirNode'
        )
        self._add_idf_object(
            'AirLoopHVAC:UnitaryHeatPump:AirToAir',
            'HeatPump', '', 'AirLoopSupplyInlet', 'AirLoopSupplyOutlet', sys_vol_flow, sys_vol_flow, sys_vol_flow,
            'Indoor',
            'Fan:OnOff', 'Fan',
            'Coil:Heating:DX:SingleSpeed', 'HeatingCoil',
            'Coil:Cooling:DX:SingleSpeed', 'CoolingCoil',
            'Coil:Heating:Electric', 'SupplementalCoil',
            max_supply_temp_for_supplemental_heater,
        )
        self._add_idf_object(
            'Coil:Heating:DX:SingleSpeed',
            'HeatingCoil', '', rated_heating_capacity_watts, cop_heating, sys_vol_flow, '',
            'CoolingCoilOutlet', 'HeatingCoilOutlet',
            'HtgCapFT', 'HtgCapFF', 'HtgEirFT', 'HtgEirFF', 'HtgPLF', 'HtgDefrostEirFT',
            min_outdoor_temp_for_compressor, '', '', '', '', '', '', defrost_time_period
        )
        self._add_idf_object(
            'Curve:Biquadratic',
            'HtgCapFT', 0.876825, -0.002955, -0.000058, 0.025335, 0.000196, -0.000043, -20, 20, -20, 20
        )
        self._add_idf_object(
            'Curve:Quadratic',
            'HtgCapFF', 0.694045465, 0.474207981, -0.168253446, 0.5, 1.5
        )
        self._add_idf_object(
            'Curve:Biquadratic',
            'HtgEirFT', 0.704658, 0.008767, 0.000625, -0.009037, 0.000738, -0.001025, -20, 20, -20, 20
        )
        self._add_idf_object(
            'Curve:Quadratic',
            'HtgEirFF', 2.185418751, -1.942827919, 0.757409168, 0.0, 1.0
        )
        self._add_idf_object(
            'Curve:Quadratic',
            'HtgPLF', 0.9, 0.1, 0.0, 0.0, 1.0
        )
        self._add_idf_object(
            'Curve:Biquadratic',
            'HtgDefrostEirFT', 1, 0, 0, 0, 0, 0, 0, 50, 0, 50
        )
        self._add_idf_object(
            'Coil:Heating:Electric',
            'SupplementalCoil', '', 1, supplemental_heater_capacity_watts, 'HeatingCoilOutlet', 'AirLoopSupplyOutlet'
        )
        self._add_idf_object(
            'Coil:Cooling:DX:SingleSpeed',
            'CoolingCoil', '', rated_cooling_capacity_watts, rated_shr, cop_cooling, sys_vol_flow, '',
            'FanOutlet', 'CoolingCoilOutlet', 'ClgCapFT', 'ClgCapFF', 'ClgEirFT', 'ClgEirFF', 'ClgPLF', '',
            '', '', '', '', 'CoilCondInlet'
        )
        self._add_idf_object(
            'Curve:Biquadratic',
            'ClgCapFT', 1.55736, -0.074448, 0.003099, 0.00146, -0.000041, -0.000427, 0, 50, 0, 50
        )
        self._add_idf_object(
            'Curve:Quadratic',
            'ClgCapFF', 0.718664047, 0.41797409, -0.136638137, 0.5, 1.5
        )
        self._add_idf_object(
            'Curve:Biquadratic',
            'ClgEirFT', -0.350448, 0.11681, -0.0034, -0.001226, 0.000601, -0.000467, 12.77, 23.88, 18.0, 46.1
        )
        self._add_idf_object(
            'Curve:Quadratic',
            'ClgEirFF', 1.143487507, -0.13943972, -0.004047787, 0.5, 1.5
        )
        self._add_idf_object(
            'Curve:Quadratic',
            'ClgPLF', 0.9, 0.1, 0.0, 0.0, 1.0
        )
        self._add_idf_object(
            'OutdoorAir:Node',
            'CoilCondInlet', -1
        )
        self._add_idf_object(
            'Fan:OnOff',
            'Fan', '', '', static_pressure_pascals, sys_vol_flow, '', '', 'AirLoopSupplyInlet', 'FanOutlet'
        )
